@tailwind base;

@tailwind components;

@tailwind utilities;

@layer base {
	:root {
		--scrollbar-width: calc(100vw - 100%);
		--measure-cap: 65ch;
	}

	.tw-h-inherit {
		height: inherit;
	}

	/**  - Compensate width of element for scrollbar -
    *   so it does not hide behind the scrollbar 
    *   plus hence does not activate the x-scrollbar.
    *
    *   See https://codepen.io/shshaw/pen/JqGmKx
    **/
	.tw-w-full-cmpn-scrlb {
		width: calc(100% - var(--scrollbar-width)) !important;
	}

	/** 
     * Measure Cap START 
     * *****************
     */

	* {
		max-width: var(--measure-cap);
	}

	html,
	body,
	div,
	header,
	nav,
	main,
	footer {
		max-width: none;
		@apply tw-leading-relaxed;
	}

	/** 
     * Measure Cap END
     **/
}

@layer components {
	/** 
     * Stack By Flex START
     * ******************
     *
     * Stack container that let it's elements stack up.
     * Additionally, as instrinsic to flex,
     * the stacked element's _CAN_ grow to take the 
     * same height as their stack container - see 
     * .tw-stack-flex-grow-my
     */

	/**
      * Visibility: PRIVATE (ptw-...) 
      */
	.ptw-stack-byflex {
		display: flex;
		flex-direction: column;
	}

	/** 
     * Stack container that let it's elements stack up  
     * plus ...
     **/
	.tw-stack-byflex-grow-my {
		@apply ptw-stack-byflex;
	}

	/**
     * ... advise them to grow to its's height.
     **/
	.tw-stack-byflex-grow-my > * {
		@apply tw-stack-byflex-grow-me;
	}

	/** 
     * Stack container that let it's elements stack up plus  
     * advise them to expand to its's height.
     **/
	.tw-stack-byflex-shrink-my {
		@apply ptw-stack-byflex;
	}

	/**
     * ... advise them to shrink to its's height.
     **/
	.tw-stack-byflex-shrink-my > * {
		@apply tw-stack-byflex-shrink-me;
	}

	/** 
     * Exception classes have same specificity as the container
     * classes. Hence the exception classes MUST be listed in 
     * the stylesheet AFTER the container classes
     **/

	/**
     * Exception class for a stack container's element.
     * Enables the intrinsic, "natural" sizing of it's element.
     */
	.tw-stack-byflex-natural-me {
		flex-shrink: 0 !important;
		flex-grow: 0 !important;
	}

	/**
     * Exception class for a stack container's element.
     * Enables growing-only of it's element. 
     */
	.tw-stack-byflex-grow-me {
		flex-grow: 1 !important;
	}

	/**
     * Exception class for a stack container's elements.
     * Enables shrinking-only of it's element. 
     */
	.tw-stack-byflex-shrink-me {
		flex-shrink: 1 !important;
	}

	/** 
     * Stack By Flex END
     **/

	/** 
     * Measure Cap START 
     * *****************
     */

	/**
     * Exception class for not applying a measure cap on the container's elements.
     * The measure-cap rule this one exempts is applied as a global rule on specific elements, 
     * see layer base.
     */
	.tw-measure-cap-not-my > * {
		@apply tw-measure-cap-not-me;
	}

	/**
     * Exception class for not applying a measure cap on an element.
     * The measure-cap rule this one exempts is applied as a global rule on specific elements, 
     * see layer base.
     */
	.tw-measure-cap-not-me {
		@apply tw-max-w-none;
	}

	/**
     * Exception class for not applying a measure cap on the container's elements and on the element itself.
     * The measure-cap rule this one exempts is applied as a global rule on specific elements, 
     * see layer base.
     */
	.tw-measure-cap-not-memy {
		@apply tw-measure-cap-not-me;
	}

	/**
     * Exception class for not applying a measure cap on the container's elements and on the element itself.
     * Note that this @apply generates!
     *  .tw-measure-cap-not-memy > * {
     *      max-width: none;
     *  }
     */
	.tw-measure-cap-not-memy {
		@apply tw-measure-cap-not-my;
	}

	/**/

	/**
     * Exception class for applying a measure cap on the container's elements.
     * The measure-cap rule this one exempts is applied as a global rule on specific elements, 
     * see layer base.
     */
	.tw-measure-cap-my > * {
		@apply tw-measure-cap-me;
	}

	/**
     * Exception class for applying a measure cap on an element.
     * The measure-cap rule this one exempts is applied as a global rule on specific elements, 
     * see layer base.
     */
	.tw-measure-cap-me {
		max-width: var(--measure-cap);
	}

	/**
     * Exception class for applying a measure cap on the container's elements and on the element itself.
     * The measure-cap rule this one exempts is applied as a global rule on specific elements, 
     * see layer base.
     */
	.tw-measure-cap-memy {
		@apply tw-measure-cap-me;
	}

	/**
     * Exception class for applying a measure cap on the container's elements and on the element itself.
     * Note that this @apply generates!
     *  .tw-measure-cap-memy > * {
     *      max-width: none;
     *  }
     */
	.tw-measure-cap-memy {
		@apply tw-measure-cap-my;
	}

	/* .tw-center-v-byflex-bymar-4 {
		box-sizing: content-box;
		display: flex;
		flex-direction: column;
		padding-top: 1rem;
		padding-bottom: 1rem;
	}

	[class*="tw-center-v-byflex-bymar-"] > .tw-center-v-byflex-bymar-principal {
		margin-top: auto;
		margin-bottom: auto;
	} */

	/** 
     * Measure Cap END
     **/
}

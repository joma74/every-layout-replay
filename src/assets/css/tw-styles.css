@tailwind base;

@tailwind components;

@tailwind utilities;

@layer base {
	:root {
		--scrollbar-width: calc(100vw - 100%);
		--measure-cap: 65ch;
	}

	.tw-h-inherit {
		height: inherit;
	}

	/**  - Compensate width of element for scrollbar -
    *   so it does not hide behind the scrollbar 
    *   plus hence does not activate the x-scrollbar.
    *
    *   See https://codepen.io/shshaw/pen/JqGmKx
    **/
	.tw-w-full-cmpn-scrlb {
		width: calc(100% - var(--scrollbar-width)) !important;
	}

	/** 
     * Measure Cap START 
     * *****************
     */

	* {
		max-width: var(--measure-cap);
	}

	html,
	body,
	div,
	header,
	nav,
	main,
	footer {
		max-width: none;
		@apply tw-leading-relaxed;
	}

	/** 
     * Measure Cap END
     **/
}

@layer components {
	/** 
     * Flex With Direction START
     * *************************
     */
	.tw-flex-h {
		display: flex;
		flex-direction: column;
	}

	.tw-flex-v {
		display: flex;
		flex-direction: row;
	}

	/** 
     * Flex With Direction END
     * ***********************
     */

	/** 
     * Distribute Evenly In Flex START
     * ************************************
     */

	.tw-flex-h.tw-dist-v-evenly-my,
	.tw-flex-v.tw-dist-h-evenly-my {
		justify-content: space-evenly;
	}

	/** 
     * Distribute Evenly END
     * *********************************
     */

	/** 
     * Center Horizontal By Container In Flex START
     * ********************************************
     */

	.tw-flex-h.tw-center-h-byflex-my,
	.tw-flex-v.tw-center-v-byflex-my {
		align-items: center;
	}

	.tw-flex-h.tw-center-v-byflex-my,
	.tw-flex-v.tw-center-h-byflex-my {
		justify-content: center;
	}

	.tw-flex-h.tw-center-vh-byflex-my,
	.tw-flex-v.tw-center-vh-byflex-my {
		align-items: center;
		justify-content: center;
	}

	/** 
     * Center Horizontal By Container In Flex END
     * ******************************************
     */

	/** 
     * Center Horizontal By Margin In Flex START
     * *****************************************
     */

	.tw-flex-h.tw-center-h-bymar-my > *,
	.tw-flex-v.tw-center-h-bymar-my > *,
	.tw-flex-h.tw-dist-h-uniform-my > *,
	.tw-flex-v.tw-dist-h-uniform-my > *,
	.tw-center-h-bymar-me {
		box-sizing: content-box;
		max-height: max-content;
		margin-left: auto;
		margin-right: auto;
	}

	.tw-flex-h.tw-center-h-bymar-my {
		text-align: center;
	}

	.tw-flex-h.tw-center-v-bymar-my > *,
	.tw-flex-v.tw-center-v-bymar-my > *,
	.tw-flex-h.tw-dist-v-uniform-my > *,
	.tw-flex-v.tw-dist-v-uniform-my > *,
	.tw-center-v-bymar-me {
		box-sizing: content-box;
		max-height: max-content;
		margin-top: auto;
		margin-bottom: auto;
	}

	.tw-flex-h.tw-center-vh-bymar-my > *,
	.tw-flex-v.tw-center-vh-bymar-my > *,
	.tw-center-vh-bymar-me {
		box-sizing: content-box;
		max-height: max-content;
		margin-left: auto;
		margin-right: auto;
		margin-top: auto;
		margin-bottom: auto;
	}

	/** 
     * Center Horizontal By Margin In Flex END
     * ***************************************
     */

	/** 
     * Center Horizontal By Margin START
     * *********************************
     */

	.tw-center-h {
		box-sizing: content-box;
		max-width: max-content;
		margin-left: auto;
		margin-right: auto;
	}

	/** 
     * Center Horizontal By Margin END
     **/

	/** 
     * Center Vertical By Margin START
     * *******************************
     */

	.tw-center-v {
		box-sizing: content-box;
		max-width: max-content;
		margin-top: auto;
		margin-bottom: auto;
	}

	/** 
     * Center Vertical By Margin END
     **/

	/** 
     * Center Horizontal and Vertical By Margin START
     * *********************************
     */

	.tw-center-vh {
		box-sizing: content-box;
		max-width: max-content;
		margin-left: auto;
		margin-right: auto;
		margin-top: auto;
		margin-bottom: auto;
	}

	/** 
     * Center Horizontal and Vertical By Margin END
     **/

	/** 
     * Grow Shrink Natural Me My In Flex START
     * ***************************************
     **/

	/** Just Grow My */

	.tw-flex-grow-my > * {
		@apply tw-flex-grow-me;
	}

	.tw-flex-shrink-my > * {
		@apply tw-flex-shrink-me;
	}

	.tw-flex-natural-my > * {
		@apply tw-flex-natural-me;
	}

	/** Flex and Grow My */

	.tw-flex-h-grow-my {
		display: flex;
		flex-direction: column;
	}

	.tw-flex-h-grow-my > * {
		@apply tw-flex-grow-me;
	}

	.tw-flex-v-grow-my {
		display: flex;
		flex-direction: row;
	}

	.tw-flex-v-grow-my > * {
		@apply tw-flex-grow-me;
	}

	/**
     * Exception class for a flex container's element.
     * Enables growing-only of the element itself. 
     */
	.tw-flex-grow-me {
		flex-grow: 1 !important;
	}

	/**
     * Exception class for a flex container's elements.
     * Enables shrinking-only of the element itself. 
     */
	.tw-flex-shrink-me {
		flex-shrink: 1 !important;
	}

	/**
     * Exception class for a flex container's element.
     * Enables growing-only of the element itself. 
     */
	.tw-flex-natural-me {
		flex-grow: 0 !important;
		flex-shrink: 0 !important;
	}

	/** 
     * Flex Grow Shrink Natural Me My In Flex END
     **/

	/** 
     * Stack By Flex START
     * ******************
     *
     * Stack container that let it's elements stack up.
     * Additionally, as instrinsic to flex,
     * the stacked element's _CAN_ grow to take the 
     * same height as their stack container - see 
     * .tw-stack-v-flex-grow-my
     */

	/**
      * Visibility: PRIVATE (ptw-...) 
      */
	.ptw-stack-v-byflex {
		display: flex;
		flex-direction: column;
	}

	/** 
     * Stack container that let it's elements stack up  
     * plus ...
     **/
	.tw-stack-v-byflex-grow-my {
		@apply ptw-stack-v-byflex;
	}

	/**
     * ... advise them to grow to its's height.
     **/
	.tw-stack-v-byflex-grow-my > * {
		@apply tw-stack-v-byflex-grow-me;
	}

	/** 
     * Stack container that let it's elements stack up plus  
     * advise them to expand to its's height.
     **/
	.tw-stack-v-byflex-shrink-my {
		@apply ptw-stack-v-byflex;
	}

	/**
     * ... advise them to shrink to its's height.
     **/
	.tw-stack-v-byflex-shrink-my > * {
		@apply tw-stack-v-byflex-shrink-me;
	}

	/** 
     * Exception classes have same specificity as the container
     * classes. Hence the exception classes MUST be listed in 
     * the stylesheet AFTER the container classes
     **/

	/**
     * Exception class for a stack container's element.
     * Enables the intrinsic, "natural" sizing of it's element.
     */
	.tw-stack-v-byflex-natural-me {
		flex-shrink: 0 !important;
		flex-grow: 0 !important;
	}

	/**
     * Exception class for a stack container's element.
     * Enables growing-only of it's element. 
     */
	.tw-stack-v-byflex-grow-me {
		flex-grow: 1 !important;
	}

	/**
     * Exception class for a stack container's elements.
     * Enables shrinking-only of it's element. 
     */
	.tw-stack-v-byflex-shrink-me {
		flex-shrink: 1 !important;
	}

	/** 
     * Stack By Flex END
     **/

	/** 
     * Measure Cap START 
     * *****************
     */

	/**
     * Exception class for not applying a measure cap on the container's elements.
     * The measure-cap rule this one exempts is applied as a global rule on specific elements, 
     * see layer base.
     */
	.tw-measure-natural-my > * {
		@apply tw-measure-natural-me;
	}

	/**
     * Exception class for not applying a measure cap on an element.
     * The measure-cap rule this one exempts is applied as a global rule on specific elements, 
     * see layer base.
     */
	.tw-measure-natural-me {
		@apply tw-max-w-none;
	}

	/**
     * Exception class for not applying a measure cap on the container's elements and on the element itself.
     * The measure-cap rule this one exempts is applied as a global rule on specific elements, 
     * see layer base.
     */
	.tw-measure-natural-memy {
		@apply tw-measure-natural-me;
	}

	/**
     * Exception class for not applying a measure cap on the container's elements and on the element itself.
     * Note that this @apply generates!
     *  .tw-measure-natural-memy > * {
     *      max-width: none;
     *  }
     */
	.tw-measure-natural-memy {
		@apply tw-measure-natural-my;
	}

	/**/

	/**
     * Exception class for applying a measure cap on the container's elements.
     * The measure-cap rule this one exempts is applied as a global rule on specific elements, 
     * see layer base.
     */
	.tw-measure-cap-my > * {
		@apply tw-measure-cap-me;
	}

	/**
     * Exception class for applying a measure cap on an element.
     * The measure-cap rule this one exempts is applied as a global rule on specific elements, 
     * see layer base.
     */
	.tw-measure-cap-me {
		max-width: var(--measure-cap);
	}

	/**
     * Exception class for applying a measure cap on the container's elements and on the element itself.
     * The measure-cap rule this one exempts is applied as a global rule on specific elements, 
     * see layer base.
     */
	.tw-measure-cap-memy {
		@apply tw-measure-cap-me;
	}

	/**
     * Exception class for applying a measure cap on the container's elements and on the element itself.
     * Note that this @apply generates!
     *  .tw-measure-cap-memy > * {
     *      max-width: none;
     *  }
     */
	.tw-measure-cap-memy {
		@apply tw-measure-cap-my;
	}

	/** 
     * Measure Cap END
     **/

	/** 
     * Workspace Area START 
     * *****************
     */

	/** 
     * Workspace Area END
     **/
}
